# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
INCLUDES += -Isrc -IThirdPartyLibs/plog/include -IThirdPartyLibs/glfw/include -IThirdPartyLibs/glad/include -IThirdPartyLibs/imgui -IThirdPartyLibs/glm
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug)
TARGETDIR = ../bin/Debug-linux-x86_64/Ullmannite
TARGET = $(TARGETDIR)/Ullmannite
OBJDIR = ../bin-obj/Debug-linux-x86_64/Ullmannite
DEFINES += -DGLFW_INCLUDE_NONE -DPLATFORM_LINUX -DDEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -g -std=c++17
LIBS += ../bin/Debug-linux-x86_64/GLFW/libGLFW.a ../bin/Debug-linux-x86_64/GLAD/libGLAD.a ../bin/Debug-linux-x86_64/IMGUI/libIMGUI.a -lX11
LDDEPS += ../bin/Debug-linux-x86_64/GLFW/libGLFW.a ../bin/Debug-linux-x86_64/GLAD/libGLAD.a ../bin/Debug-linux-x86_64/IMGUI/libIMGUI.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else ifeq ($(config),release)
TARGETDIR = ../bin/Release-linux-x86_64/Ullmannite
TARGET = $(TARGETDIR)/Ullmannite
OBJDIR = ../bin-obj/Release-linux-x86_64/Ullmannite
DEFINES += -DGLFW_INCLUDE_NONE -DPLATFORM_LINUX -DRELEASE
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -std=c++17
LIBS += ../bin/Release-linux-x86_64/GLFW/libGLFW.a ../bin/Release-linux-x86_64/GLAD/libGLAD.a ../bin/Release-linux-x86_64/IMGUI/libIMGUI.a -lX11
LDDEPS += ../bin/Release-linux-x86_64/GLFW/libGLFW.a ../bin/Release-linux-x86_64/GLAD/libGLAD.a ../bin/Release-linux-x86_64/IMGUI/libIMGUI.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/Application.o
GENERATED += $(OBJDIR)/Buffer.o
GENERATED += $(OBJDIR)/BufferOpenGL.o
GENERATED += $(OBJDIR)/Drawable.o
GENERATED += $(OBJDIR)/Event.o
GENERATED += $(OBJDIR)/EventQueue.o
GENERATED += $(OBJDIR)/Keyboard.o
GENERATED += $(OBJDIR)/Layer.o
GENERATED += $(OBJDIR)/LayerManager.o
GENERATED += $(OBJDIR)/Logger.o
GENERATED += $(OBJDIR)/MainLayer.o
GENERATED += $(OBJDIR)/Mouse.o
GENERATED += $(OBJDIR)/Renderer.o
GENERATED += $(OBJDIR)/Shader.o
GENERATED += $(OBJDIR)/ShaderManager.o
GENERATED += $(OBJDIR)/ShaderOpenGL.o
GENERATED += $(OBJDIR)/Texture.o
GENERATED += $(OBJDIR)/TextureOpenGL.o
GENERATED += $(OBJDIR)/UiArea.o
GENERATED += $(OBJDIR)/UiElement.o
GENERATED += $(OBJDIR)/UiLayout.o
GENERATED += $(OBJDIR)/Ullpch.o
GENERATED += $(OBJDIR)/Window.o
GENERATED += $(OBJDIR)/main.o
OBJECTS += $(OBJDIR)/Application.o
OBJECTS += $(OBJDIR)/Buffer.o
OBJECTS += $(OBJDIR)/BufferOpenGL.o
OBJECTS += $(OBJDIR)/Drawable.o
OBJECTS += $(OBJDIR)/Event.o
OBJECTS += $(OBJDIR)/EventQueue.o
OBJECTS += $(OBJDIR)/Keyboard.o
OBJECTS += $(OBJDIR)/Layer.o
OBJECTS += $(OBJDIR)/LayerManager.o
OBJECTS += $(OBJDIR)/Logger.o
OBJECTS += $(OBJDIR)/MainLayer.o
OBJECTS += $(OBJDIR)/Mouse.o
OBJECTS += $(OBJDIR)/Renderer.o
OBJECTS += $(OBJDIR)/Shader.o
OBJECTS += $(OBJDIR)/ShaderManager.o
OBJECTS += $(OBJDIR)/ShaderOpenGL.o
OBJECTS += $(OBJDIR)/Texture.o
OBJECTS += $(OBJDIR)/TextureOpenGL.o
OBJECTS += $(OBJDIR)/UiArea.o
OBJECTS += $(OBJDIR)/UiElement.o
OBJECTS += $(OBJDIR)/UiLayout.o
OBJECTS += $(OBJDIR)/Ullpch.o
OBJECTS += $(OBJDIR)/Window.o
OBJECTS += $(OBJDIR)/main.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking Ullmannite
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning Ullmannite
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) rmdir /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/Application.o: src/Application/Application.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/main.o: src/Application/main.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Event.o: src/Event/Event.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/EventQueue.o: src/Event/EventQueue.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Keyboard.o: src/Input/Keyboard.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Mouse.o: src/Input/Mouse.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Layer.o: src/Layer/Layer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LayerManager.o: src/Layer/LayerManager.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/MainLayer.o: src/Layer/MainLayer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Logger.o: src/Logger/Logger.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Buffer.o: src/Rendering/Api/Buffer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/BufferOpenGL.o: src/Rendering/Api/OpenGL/BufferOpenGL.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ShaderOpenGL.o: src/Rendering/Api/OpenGL/ShaderOpenGL.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/TextureOpenGL.o: src/Rendering/Api/OpenGL/TextureOpenGL.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Renderer.o: src/Rendering/Api/Renderer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Shader.o: src/Rendering/Api/Shader.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ShaderManager.o: src/Rendering/Api/ShaderManager.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Texture.o: src/Rendering/Api/Texture.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Drawable.o: src/Rendering/Drawable/Drawable.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/UiArea.o: src/UiElement/UiArea.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/UiElement.o: src/UiElement/UiElement.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/UiLayout.o: src/UiElement/UiLayout.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Ullpch.o: src/Ullpch.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Window.o: src/Window/Window.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif